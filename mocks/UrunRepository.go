// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	urun "github.com/go-turk/konya/urun"
)

// UrunRepository is an autogenerated mock type for the UrunRepository type
type UrunRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UrunRepository) Create(_a0 *urun.Urun) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*urun.Urun) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *UrunRepository) Delete(_a0 *urun.Urun) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*urun.Urun) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields:
func (_m *UrunRepository) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *UrunRepository) FindAll() ([]urun.Urun, error) {
	ret := _m.Called()

	var r0 []urun.Urun
	if rf, ok := ret.Get(0).(func() []urun.Urun); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]urun.Urun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *UrunRepository) FindByID(id uint) (*urun.Urun, error) {
	ret := _m.Called(id)

	var r0 *urun.Urun
	if rf, ok := ret.Get(0).(func(uint) *urun.Urun); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*urun.Urun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UrunRepository) Update(_a0 *urun.Urun) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*urun.Urun) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUrunRepository creates a new instance of UrunRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUrunRepository(t testing.TB) *UrunRepository {
	mock := &UrunRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
